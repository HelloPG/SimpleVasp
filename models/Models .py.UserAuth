#!/usr/bin/env python

import datetime
from google.appengine.ext import ndb
from google.appengine.api import users

# webapp2 authentication
import time
import webapp2_extras.appengine.auth.models
from webapp2_extras import security

class MarketData(ndb.Model):
  Treasury10yrReturn = ndb.FloatProperty()
  SP500Return = ndb.FloatProperty()
  entry_date = ndb.DateProperty(auto_now=True)
  
class Stock(ndb.Model):
  ticker = ndb.StringProperty(required=True)
  exchange = ndb.StringProperty(required=True)
  name = ndb.StringProperty()
  shares_os = ndb.FloatProperty()
  beta = ndb.FloatProperty()
  coe = ndb.FloatProperty() # Cost of Equity - Current value. Updated when Beta/RF/RM are changed.
  price = ndb.FloatProperty()  # Current Price - Updated weekly/daily?
  iValue = ndb.FloatProperty()  # Crowd Intrinsic Value. Calculated during - ProcessCrowdEstimates
  diffInValue = ndb.FloatProperty()  # iValue - price
  entry_date = ndb.DateProperty(auto_now=True)
  
class AnalystEstimate(ndb.Model):
  ticker = ndb.StringProperty(required=True)
  exchange = ndb.StringProperty(required=True)
  year = ndb.IntegerProperty(required=True)
  ni = ndb.FloatProperty()
 
class YearlyFinancial(ndb.Model):
  ticker = ndb.StringProperty(required=True)
  year = ndb.IntegerProperty(required=True)
  sales = ndb.FloatProperty()
  ni = ndb.FloatProperty()
  dep = ndb.FloatProperty()
  capEx = ndb.FloatProperty()  
  wcDelta = ndb.FloatProperty()    # Increase in WC
  debtDelta = ndb.FloatProperty()  # Increase in Debt
  salesGrowth = ndb.FloatProperty()	
  niPerSales = ndb.FloatProperty()	
  depPerSales = ndb.FloatProperty()	
  capExPerSales = ndb.FloatProperty()
  wcDeltaPerSales = ndb.FloatProperty()    
  debtDeltaPerSales = ndb.FloatProperty()
  fcf = ndb.FloatProperty()  # fcf = ni + dep - capEx - wcDelta + debtDelta
  entry_date = ndb.DateProperty(auto_now=True)
  
class CrowdStockForecast(ndb.Model):
  ticker = ndb.StringProperty(required=True)
  year = ndb.IntegerProperty(required=True)
  group = ndb.StringProperty()
  
  sales = ndb.FloatProperty()
  ni = ndb.FloatProperty()
  dep = ndb.FloatProperty()
  capEx = ndb.FloatProperty()  
  wcDelta = ndb.FloatProperty()      # Increase in WC
  debtDelta = ndb.FloatProperty()    # Increase in Debt
  salesGrowth = ndb.FloatProperty() 
  niPerSales = ndb.FloatProperty()	
  depPerSales = ndb.FloatProperty()	
  capExPerSales = ndb.FloatProperty()	
  wcDeltaPerSales = ndb.FloatProperty()
  debtDeltaPerSales = ndb.FloatProperty()  
  fcf = ndb.FloatProperty()          # fcf = ni + dep - capEx - wcDelta + debtDelta
  
  salesVar = ndb.FloatProperty()
  niVar = ndb.FloatProperty()
  depVar = ndb.FloatProperty()
  capExVar = ndb.FloatProperty()  
  wcDeltaVar = ndb.FloatProperty()      
  debtDeltaVar = ndb.FloatProperty()    
  salesGrowthVar = ndb.FloatProperty() 
  niPerSalesVar = ndb.FloatProperty()	
  depPerSalesVar = ndb.FloatProperty()	
  capExPerSalesVar = ndb.FloatProperty()	
  wcDeltaPerSalesVar = ndb.FloatProperty()
  debtDeltaPerSalesVar = ndb.FloatProperty()  
  fcfVar = ndb.FloatProperty()          
  
  entry_date = ndb.DateProperty(auto_now=True)  
  
class VaspUser(ndb.Model):
  user = ndb.StringProperty(required=True)
  entry_date = ndb.DateProperty(auto_now=True)
  
class VaspGroup(ndb.Model):
  name = ndb.StringProperty(required=True)
  description = ndb.StringProperty()
  entry_date = ndb.DateProperty(auto_now=True)
  
class UserGroup(ndb.Model):
  group = ndb.StringProperty(required=True)
  user = ndb.StringProperty(required=True)
  entry_date = ndb.DateProperty(auto_now=True)
   
class UserStock(ndb.Model):
  user = ndb.StringProperty(required=True)
  ticker = ndb.StringProperty(required=True)
  companyName = ndb.StringProperty()
  entry_date = ndb.DateProperty(auto_now=True)
   
class UserStockForecast(ndb.Model):
  user = ndb.StringProperty(required=True)
  ticker = ndb.StringProperty(required=True)
  year = ndb.IntegerProperty(required=True)
  sales = ndb.FloatProperty()
  ni = ndb.FloatProperty()
  dep = ndb.FloatProperty()
  capEx = ndb.FloatProperty()   
  wcDelta = ndb.FloatProperty()      # Increase in WC
  debtDelta = ndb.FloatProperty()    # Increase in Debt
  salesGrowth = ndb.FloatProperty()	
  niPerSales = ndb.FloatProperty()	
  depPerSales = ndb.FloatProperty()	
  capExPerSales = ndb.FloatProperty()	
  wcDeltaPerSales = ndb.FloatProperty()
  debtDeltaPerSales = ndb.FloatProperty() 
  fcf = ndb.FloatProperty()  
  entry_date = ndb.DateProperty(auto_now=True)  


### webapp2 - User Authentication
class User(webapp2_extras.appengine.auth.models.User):
  def set_password(self, raw_password):
    """Sets the password for the current user
    :param raw_password:
    The raw password which will be hashed and stored
    """
    self.password = security.generate_password_hash(raw_password, length=12)
  
  
  @classmethod
  def get_by_auth_token(cls, user_id, token, subject='auth'):
    """Returns a user object based on a user ID and token.
    :param user_id:
    The user_id of the requesting user.
    :param token:
    The token string to be verified.
    :returns:
    A tuple ``(User, timestamp)``, with a user object and
    the token timestamp, or ``(None, None)`` if both were not found.
    """
    token_key = cls.token_model.get_key(user_id, subject, token)
    user_key = ndb.Key(cls, user_id)
    # Use get_multi() to save a RPC call.
    valid_token, user = ndb.get_multi([token_key, user_key])
    if valid_token and user:
      timestamp = int(time.mktime(valid_token.created.timetuple()))
      return user, timestamp
      
    return None, None  